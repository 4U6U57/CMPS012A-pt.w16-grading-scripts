#!/bin/bash
# grade.sh

# 2 points for submitting
# 1 point for naming correctly
# 2 points Makefile makes
# 4 points invalid inputs, abc, -5 for each 2 inputs
# 8 points for 8 tests, 2 points format, 6 tests

ROOT="/afs/cats.ucsc.edu/class"
CLASSES="cmps012a-pt.w16 cmps011-pt.w16"
ASG=$(basename $(pwd))
BIN="$ROOT/cmps012a-pt.w16/bin/$ASG"
SEPARATE="=================================================="
LOG=$BIN/grade.log

# Takes input cmd, runs it for every student
# Use this like follows: forall ls, forall echo "test"
forall() {
  for CLASS in $CLASSES; do
    CLASSNUM=$(echo $CLASS | cut -d '0' -f 2 | cut -d '-' -f 1)
    ASGDIR=$ROOT/$CLASS/$ASG
    cd $ASGDIR
    for STUDENT in $(ls -d */); do
      STUDENTDIR=$ASGDIR/$STUDENT
      cd $STUDENTDIR
      echo "$SEPARATE"
      echo "$CLASS/$STUDENT $@"
      STUDENT=$(basename $STUDENT /)
      $@
    done
  done
}

# Cleanup any trash from previous runs
RUNME=".runme.f"
runmenow() {
  if [[ -e $RUNME ]]; then
    $RUNME
    rm -f $RUNME
  fi
}
runmeinit() {
  runmenow > /dev/null
  echo "#!/bin/bash" > $RUNME
  chmod +x $RUNME
}
forall runmeinit > /dev/null
runme() {
  echo $@ >> $RUNME
}

# Init scores
# cat $SCOREFILE to read current score
# use score -1 to deduct one point
SCOREFILE=".score.f"
DEDUCTFILE=".deduct.f"
RESULTFILE="result.f"
NOTEFILE=".notes.f"
SCORETOTAL=20
scoreinit() {
  echo $@ > $SCOREFILE
  rm -f $DEDUCTFILE
  touch $DEDUCTFILE
}
score() {
  echo $(($(cat $SCOREFILE) + $@)) > $SCOREFILE
}
forall scoreinit 0 > /dev/null
rm -f $LOG

# Automatic checks
RESULTFILE=errors.temp
checkauto() {
  if [[ -e Makefile ]]; then
    echo "3 / 3 | Submitted Makefile correctly" >> $DEDUCTFILE
    score 3
  elif [[ -e MakeGCD ]]; then
    echo "2 / 3 | Makefile named incorrectly (ls: $(ls -m))" >> $DEDUCTFILE
    score 2
    cp MakeGCD Makefile
    runme rm -f Makefile
  elif [[ -e makefile ]]; then
    echo "2 / 3 | Makefile named incorrectly (ls: $(ls -m))" >> $DEDUCTFILE
    score 2
    cp makefile Makefile
    runme rm -f Makefile
  elif [[ -e Makefile.command ]]; then
    echo "2 / 3 | Makefile named incorrectly (ls: $(ls -m))" >> $DEDUCTFILE
    score 2
    cp Makefile.command Makefile
    runme rm -f Makefile
  else
    echo "0 / 3 | Did not submit Makefile (ls: $(ls -m))" >> $DEDUCTFILE
  fi
  if [[ -e Makefile && -e GCD.c ]]; then
    rm -f GCD
    make -s GCD
    if [[ -e GCD ]]; then
      echo "2 / 2 | Makefile makes correctly" >> $DEDUCTFILE
      score 2
    else
      echo "1 / 2 | Makefile failed to make" >> $DEDUCTFILE
      score 1
    fi
    rm -f GCD GCD.o
  else
    echo "1 / 2 | Make tests require Makefile and GCD.c (ls: $(ls -m))" >> $DEDUCTFILE
    score 1
  fi

  if [[ -e GCD.c ]]; then
    echo "3 / 3 | Submitted GCD.c correctly" >> $DEDUCTFILE
    score 3
  else
    echo "0 / 3 | Did not submit GCD.c" >> $DEDUCTFILE
  fi

  if [[ -e GCD.c ]]; then
    gcc -std=c99 -o GCD GCD.c
    if [[ -e GCD ]]; then
      rm -f GCD
      echo "4 / 4 | GCD compiles correctly" >> $DEDUCTFILE
      score 4
    else
      echo "4 / 8 | GCD does not compile" >> $DEDUCTFILE
      score 4
    fi
  else
    echo "0 /12 | GCD tests require GCD.c (ls $(ls -m))" >> $DEDUCTFILE
  fi
}
forall checkauto > /dev/null

# August's stuff
checkinvalid() {
  DEDUCT=".d.invalid.f"
  gcc -std=c99 -o GCD GCD.c
  if [[ -e $DEDUCT ]]; then
    pwd
    cat $DEDUCT
  elif [[ -e GCD ]]; then
    echo "First input string"
    echo -e "swag\n6\n9\n" | GCD
    read INPUT
    echo "Second input string"
    echo -e "6\nblaze it\n9\n" | GCD
    read INPUT
    echo "First argument negative"
    echo -e "-6\n6\n9\n" | GCD
    read INPUT
    echo "Second argument negative"
    echo -e "6\n-6\n9\n" | GCD
    echo -n "Work for invalid inputs? (y)es (0-3) (s)kip: "
    read INPUT
    case "$INPUT" in
      y)
        echo "YES"
        echo "4 / 4 | Program handled all invalid inputs correctly" >> $DEDUCT
        ;;
      [0-3])
        echo "MANUAL $INPUT"
        echo "$INPUT / 4 | Program handled $INPUT out of 4 invalid inputs" >> $DEDUCT
        ;;
      *)
        echo "Ignoring for now"
        ;;
    esac
  else
    echo "GCD DID NOT COMPILE"
  fi
  rm -f GCD
}

avalera() {
  # This code runs once, only for August
  echo "start avalera()"
  forall checkinvalid
}

icherdak(){
  # This code runs once, only for Isaak
  echo "start icherdak()"
}

# Runs user specific code first, do -c to skip this
if [[ $1 == "compile" ]]; then
  echo "Skipping user specific grading step"
else
  $USER
fi

# Finalize deduction file
DEDUCT=".d.temp.f"
makededuct() {
  touch $DEDUCT
  runme rm -f $DEDUCT
  for D in .d.*.f; do
    echo "Processing $D"
    if [[ -s $D ]]; then
      cat $D >> $DEDUCTFILE
      for N in $(cat $D | cut -d '/' -f 1); do
        score $N
      done
    fi
  done
}
forall makededuct >> $LOG
scorecap() {
  STUDENTSCORE=$(cat $SCOREFILE)
  if [[ $STUDENTSCORE -gt $SCORETOTAL ]]; then
    OVER=$((SCORETOTAL - STUDENTSCORE))
    echo "$OVER/ 0 | Student score over assignment maximum (cannot exceed 100%)" >> $DEDUCTFILE
    score $OVER
  elif [[ $STUDENTSCORE -lt 0 ]]; then
    UNDER=$((STUDENTSCORE * -1))
    echo "$UNDER/0 | Student score manually set to 0 (see notes)" >> $DEDUCTFILE
    score $UNDER
  fi
}
forall scorecap > /dev/null

# Now compile gradefile
CLASSTOTAL=0
CLASSNUMBER=0
makeavg() {
  echo "$STUDENT:$(cat $SCOREFILE) TOTAL:$CLASSTOTAL NUMBER:$CLASSNUMBER" >> $LOG
  CLASSTOTAL=$(($CLASSTOTAL + $(cat $SCOREFILE)))
  CLASSNUMBER=$(($CLASSNUMBER + 1))
}
forall makeavg >> $LOG
CLASSAVG=$(($CLASSTOTAL / $CLASSNUMBER))
CLASSPERCENT=$(($CLASSAVG * 100 / $SCORETOTAL))
echo "$SEPARATE" >> $LOG
echo "CLASSAVG:$CLASSAVG CLASSPERCENT=$CLASSPERCENT%" >> $LOG
makegrade() {
  echo "start makegrade()"
  GRADEFILE="grade.txt"
  STUDENTNAME=$(getent passwd $STUDENT | cut -d ":" -f 5)
  STUDENTSCORE=$(cat $SCOREFILE)
  STUDENTPERCENT=$(($STUDENTSCORE * 100 / $SCORETOTAL))
  INFOFILE="$BIN/info.txt"
  echo "CLASS:   $CLASS" > $GRADEFILE
  echo "ASG:     $ASG" >> $GRADEFILE
  echo "GRADER:  August Salay Valera <avalera>" >> $GRADEFILE
  echo "STUDENT: $STUDENTNAME <$STUDENT>" >> $GRADEFILE
  echo "SCORE:   $STUDENTSCORE / $SCORETOTAL ($STUDENTPERCENT%)" >> $GRADEFILE
  echo "AVERAGE: $CLASSAVG / $SCORETOTAL ($CLASSPERCENT%)" >> $GRADEFILE
  echo >> $GRADEFILE
  echo "GRADE BREAKDOWN:" >> $GRADEFILE
  if [[ -s $DEDUCTFILE ]]; then
    cat $DEDUCTFILE >> $GRADEFILE
    ls
  else
    echo "N/A" >> $GRADEFILE
  fi
  echo >> $GRADEFILE
  echo "NOTES:" >> $GRADEFILE
  if [[ -s $NOTEFILE ]]; then
    cat $NOTEFILE >> $GRADEFILE
  else
    echo "N/A" >> $GRADEFILE
  fi
  if [[ -s $INFOFILE ]]; then
    echo >> $GRADEFILE
    echo "INFO:" >> $GRADEFILE
    cat $BIN/info.txt >> $GRADEFILE
  fi
}
forall makegrade > /dev/null
ALLGRADES=$BIN/grade.all
rm -f $ALLGRADES
forall cat $GRADEFILE >> $ALLGRADES

# Create csv files
makecsv() {
  for CLASS in $CLASSES; do
    CLASSNUM=$(echo $CLASS | cut -d '0' -f 2 | cut -d '-' -f 1)
    if [[ ! -e $BIN/export ]]; then
      mkdir $BIN/export
    fi
    CSV=$BIN/export/cs$CLASSNUM.$ASG.csv
    ASGDIR=$ROOT/$CLASS/$ASG
    echo "student,$ASG[$SCORETOTAL]" > $CSV
    cd $ASGDIR
    for STUDENT in $(ls -d */); do
      STUDENTDIR=$ASGDIR/$STUDENT
      cd $STUDENTDIR
      STUDENT=$(basename $STUDENT /)
      echo "$STUDENT,$(cat $SCOREFILE)" >> $CSV
    done
  done
}
makecsv

# Send mails
wait3() {
  echo -ne "[   ]\r";
  sleep 1
  echo -ne "[#  ]\r"
  sleep 1
  echo -ne "[## ]\r"
  sleep 1
  echo "[###]"
}
MAILFILE=".mail.f"
SENDER="avalera"
makemail() {
  if [[ $USER == $SENDER && -e $MAILFILE ]]; then
    EMAIL="$STUDENT@ucsc.edu"
    mailx -s "[$CLASS] $ASG grade for $STUDENT" $EMAIL < $GRADEFILE
    rm -f $MAILFILE
    echo "$EMAIL: ($((CLASSNUMBER=$CLASSNUMBER-1)) students remaining)"
    wait3
  fi
  echo "[$CLASS] $ASG grade for $STUDENT"
}
forall makemail
CLEANFILE="CLEAN.f"
makeclean() {
  if [[ -e $CLEANFILE ]]; then
    rm -f *.f
  fi
}
forall makeclean > /dev/null
